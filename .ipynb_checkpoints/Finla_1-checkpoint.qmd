---
title: "기말고사"
author: "정일호"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---


```{python}
#| output: false
# import pandas as pd
import numpy as np
import plotly.express as px

df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration=lambda df: np.log(df.trip_duration),
    pickup_datetime=lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime=lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist=lambda df: np.sqrt((df.pickup_latitude - df.dropoff_latitude) ** 2 + (df.pickup_longitude - df.dropoff_longitude) ** 2),
    vendor_id=lambda df: df.vendor_id.map({1: 'A', 2: 'B'})
).assign(
    speed=lambda df: df.dist / df.trip_duration,
    pickup_hour=lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour=lambda df: df.dropoff_datetime.dt.hour,
    dayofweek=lambda df: df.pickup_datetime.dt.dayofweek
)
day_mapping = {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}
df['day'] = df['dayofweek'].map(day_mapping)

average_speed = df.groupby(['day', 'pickup_hour'])['speed'].mean().reset_index()


fig = px.density_heatmap(
    data_frame=average_speed,
    x='pickup_hour',
    y='day',
    z='speed',
    nbinsx=24,
    nbinsy=7,
    labels={'pickup_hour': 'pick up 시간', 'speed': 'Average Speed'},
    category_orders={'day': ['일', '토', '금', '목', '수', '화', '월']},
     color_continuous_scale='Plasma',
     height=300,
    title='요일, 시간에 따른 평균속력 시각화'
)

fig.show()

day_mapping = {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}
df['day'] = df['dayofweek'].map(day_mapping)

average_distance = df.groupby(['day', 'pickup_hour'])['dist'].mean().reset_index()

average_distance = average_distance.sort_values(['day', 'pickup_hour'])

fig = px.density_heatmap(
    data_frame=average_distance,
    x='pickup_hour',
    y='day',
    z='dist',
    nbinsx=24,
    nbinsy=7,
    labels={'pickup_hour': 'pick up 시간', 'dist': 'Average Dist'},
    category_orders={'day': ['일', '토', '금', '목', '수', '화', '월']},  # Reversed order
    color_continuous_scale='Plasma',  # Change color scale to 'Plasma'
    height=300,
    title='요일에 따른 평균이동거리 시각화'
)

import pandas as pd
import numpy as np
import plotly.express as px


df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)
# Divide speed into four sections using quartiles
df_small['speed_category'] = pd.qcut(df_small['speed'], 4, labels=['Very slow', 'A bit slow', 'A bit fast', 'Very fast'])



fig = px.line_mapbox(
    df_small,
    lat='pickup_latitude',
    lon='pickup_longitude',
    line_group='id',
    color='speed_category',
    center={'lat': 40.7322, 'lon': -73.9052},
    mapbox_style='carto-positron',
    zoom=11
)


scatter_data = px.scatter_mapbox(
    df_small,
    lat='pickup_latitude',
    lon='pickup_longitude',
    size='passenger_count',
    size_max=10,
    color='speed_category',
    mapbox_style='carto-positron',
    zoom=10
).data


for sd in scatter_data:
    fig.add_trace(sd)


fig.update_traces(
    line={'width': 1},
    opacity=0.8
)


df_small['speed_category'] = pd.qcut(df_small['speed'], 4, labels=['Very slow', 'A bit slow', 'A bit fast', 'Very fast'])

fig = px.line_mapbox(
    df_small,
    lat='pickup_latitude',
    lon='pickup_longitude',
    line_group='id',
    color='speed_category',
    center={'lat': 40.7322, 'lon': -73.9052},
    mapbox_style='carto-positron',
    zoom=11
)


df_small['speed_category'] = pd.qcut(df_small['speed'], 4, labels=['Very slow', 'A bit slow', 'A bit fast', 'Very fast'])


speed = pd.Series([1,1,2,2,3,3,4,4])
print(pd.qcut(speed,4))
print(pd.qcut(speed,4,labels=['매우느림','조금느림','조금빠름','매우빠름']))

tidydata = df_small.assign(
    speed_cut = pd.qcut(df_small['speed'], 4, labels=['매우느림','조금느림','조금빠름','매우빠름'])
).sort_values('speed_cut')

pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df_small):
    pickup = df_small.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df_small.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)
df_left = df_small.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in df_small.groupby('id')]).reset_index(drop=True)
df_feature_small2 = df_left.merge(df_right)

tidydata = df_feature_small2.assign(
    speed_cut = pd.qcut(df_feature_small2['speed'], 4, labels=['매우느림','조금느림','조금빠름','매우빠름'])
).sort_values('speed_cut')

fig = px.line_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    line_group = 'id',
    color = 'speed_cut',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom=10
)
scatter_data = px.scatter_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_cut',
    #---#
    mapbox_style = 'carto-positron',
    zoom=10
).data
for sd in scatter_data:
    fig.add_trace(sd)
fig.update_traces(
    line={
        'width':1
    },
    opacity=0.8
)

fig.show(config={'scrollZoom':False})
fig.show()

# 1-(1),(2),(3) 에 대응하는 plotly figure를 아래와 같은 이름으로 저장
# fig1 = px.density_heatmap(
    data_frame=average_speed,
    x='pickup_hour',
    y='day',
    z='speed',
    nbinsx=24,
    nbinsy=7,
    labels={'pickup_hour': 'pick up 시간', 'speed': 'Average Speed'},
    category_orders={'day': ['일', '토', '금', '목', '수', '화', '월']},
     color_continuous_scale='Plasma',
     height=300,
    title='요일, 시간에 따른 평균속력 시각화'
)
# fig2 = px.density_heatmap(
    data_frame=average_distance,
    x='pickup_hour',
    y='day',
    z='dist',
    nbinsx=24,
    nbinsy=7,
    labels={'pickup_hour': 'pick up 시간', 'dist': 'Average Dist'},
    category_orders={'day': ['일', '토', '금', '목', '수', '화', '월']},  # Reversed order
    color_continuous_scale='Plasma',  # Change color scale to 'Plasma'
    height=300,
    title='요일에 따른 평균이동거리 시각화'


# fig3 = fig.show(config={'scrollZoom':False})
```

# 기말고사1-(1),(2)

```{python}
#| title: 요일,시간에 따른 평균속력 시각화        
fig1.show()
```

```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화        
fig2.show()
```

# 기말고사1-(3)

```{python}
#| title: 속력별 경로 시각화
fig3.show()
```